var search_data = {"index":{"searchIndex":["app","bar","dbus","message","dsl","string","widgets","button","custom","debug","load","power","separator","systemd","time","uptime","widget","background()","camelize()","color()","css()","from_options()","get_manager()","get_status_icon()","get_unit()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","original_initialize()","separated()","spacing()","toggle()","update()","update()","update()","update()","update()","update()","update()","update_safe()","widget()","readme"],"longSearchIndex":["app","bar","dbus","dbus::message","dsl","string","widgets","widgets::button","widgets::custom","widgets::debug","widgets::load","widgets::power","widgets::separator","widgets::systemd","widgets::time","widgets::uptime","widgets::widget","dsl#background()","string#camelize()","dsl#color()","dsl#css()","widgets::widget::from_options()","widgets::systemd::get_manager()","widgets::systemd::get_status_icon()","widgets::systemd::get_unit()","app::new()","bar::new()","dbus::message::new()","dsl::new()","widgets::button::new()","widgets::custom::new()","widgets::debug::new()","widgets::load::new()","widgets::power::new()","widgets::separator::new()","widgets::systemd::new()","widgets::time::new()","widgets::uptime::new()","widgets::widget::new()","dbus::message#original_initialize()","dsl#separated()","dsl#spacing()","widgets::systemd::toggle()","widgets::button#update()","widgets::custom#update()","widgets::load#update()","widgets::systemd#update()","widgets::time#update()","widgets::uptime#update()","widgets::widget#update()","widgets::widget#update_safe()","dsl#widget()",""],"info":[["App","","App.html","","<p>The GTK Application\n"],["Bar","","Bar.html","","<p>The Application Window\n"],["DBus","","DBus.html","",""],["DBus::Message","","DBus/Message.html","",""],["DSL","","DSL.html","","<p>The configuration DSL.\n<p>Example configuration file:\n\n<pre>widget :power\nwidget :uptime, on_click: -&gt; { spawn &quot;alacritty ...</pre>\n"],["String","","String.html","",""],["Widgets","","Widgets.html","","<p>Base Widget class. Defines some common behavior across top level widgets in the bar.\n"],["Widgets::Button","","Widgets/Button.html","","<p>A generic button widget. It currently is exactly like the custom widget but styled as a button.\n"],["Widgets::Custom","","Widgets/Custom.html","","<p>A custom widget that executs a proc\n"],["Widgets::Debug","","Widgets/Debug.html","","<p>Break the program and jump into debugger\n"],["Widgets::Load","","Widgets/Load.html","","<p>The Load widget reads /proc/loadavg.\n<p>Such values read like +1.28 1.18 0.92 1/2076 771310+.\n<p>Where the first …\n"],["Widgets::Power","","Widgets/Power.html","","<p>A simple power button\n"],["Widgets::Separator","","Widgets/Separator.html","",""],["Widgets::Systemd","","Widgets/Systemd.html","","<p>Show the status of a systemd unit.\n<p>service: &mdash; what service?\n<p>user: &mdash; user service?\n"],["Widgets::Time","","Widgets/Time.html","","<p>A time widget.\n<p>format: &mdash; Takes a Time#strftime format string. See Formats for Dates and times. Default is …\n\n"],["Widgets::Uptime","","Widgets/Uptime.html","","<p>A widget that executes ‘uptime`\n"],["Widgets::Widget","","Widgets/Widget.html","",""],["background","DSL","DSL.html#method-i-background","(value)","<p>The window background color.\n<p>Defaults to <code>&quot;rgba(0, 0, 0, 0.5)&quot;</code>.\n"],["camelize","String","String.html#method-i-camelize","()",""],["color","DSL","DSL.html#method-i-color","(value)","<p>The default text color.\n<p>Defaults to <code>&quot;white&quot;</code>.\n"],["css","DSL","DSL.html#method-i-css","(css)","<p>Add custom CSS.\n<p>This can be combined with the ability to configure a Widgets::Widget with a custom name …\n"],["from_options","Widgets::Widget","Widgets/Widget.html#method-c-from_options","(widget)","<p>Create a Widgets::Widget from a hash with options\n"],["get_manager","Widgets::Systemd","Widgets/Systemd.html#method-c-get_manager","(user=false)",""],["get_status_icon","Widgets::Systemd","Widgets/Systemd.html#method-c-get_status_icon","(unit)","<p>A function that uses a units ActiveState to return an emoji.\n<p>Feel free to use this with your custom formatters! …\n"],["get_unit","Widgets::Systemd","Widgets/Systemd.html#method-c-get_unit","(unit_name, user=false)",""],["new","App","App.html#method-c-new","(options)",""],["new","Bar","Bar.html#method-c-new","(app)",""],["new","DBus::Message","DBus/Message.html#method-c-new","(mtype=INVALID)",""],["new","DSL","DSL.html#method-c-new","(path)",""],["new","Widgets::Button","Widgets/Button.html#method-c-new","(options)",""],["new","Widgets::Custom","Widgets/Custom.html#method-c-new","(options)",""],["new","Widgets::Debug","Widgets/Debug.html#method-c-new","(options)",""],["new","Widgets::Load","Widgets/Load.html#method-c-new","(options)",""],["new","Widgets::Power","Widgets/Power.html#method-c-new","(options)",""],["new","Widgets::Separator","Widgets/Separator.html#method-c-new","(options)",""],["new","Widgets::Systemd","Widgets/Systemd.html#method-c-new","(options)",""],["new","Widgets::Time","Widgets/Time.html#method-c-new","(options)",""],["new","Widgets::Uptime","Widgets/Uptime.html#method-c-new","(options)",""],["new","Widgets::Widget","Widgets/Widget.html#method-c-new","(options={})",""],["original_initialize","DBus::Message","DBus/Message.html#method-i-original_initialize","(mtype=INVALID)",""],["separated","DSL","DSL.html#method-i-separated","(options={})","<p>Place a Widgets::Separator between all widgets\n\n<pre>separated do\n  widget :button, on_click: -&gt; {} do &quot;clicky ...</pre>\n"],["spacing","DSL","DSL.html#method-i-spacing","(spacing)","<p>Set the spacing for the top-level box widget.\n<p>All widgets will be spaced this amount apart.\n<p>Default is …\n"],["toggle","Widgets::Systemd","Widgets/Systemd.html#method-c-toggle","(unit)",""],["update","Widgets::Button","Widgets/Button.html#method-i-update","()",""],["update","Widgets::Custom","Widgets/Custom.html#method-i-update","()",""],["update","Widgets::Load","Widgets/Load.html#method-i-update","()",""],["update","Widgets::Systemd","Widgets/Systemd.html#method-i-update","()",""],["update","Widgets::Time","Widgets/Time.html#method-i-update","()",""],["update","Widgets::Uptime","Widgets/Uptime.html#method-i-update","()",""],["update","Widgets::Widget","Widgets/Widget.html#method-i-update","()","<p>Update method for this widget\n"],["update_safe","Widgets::Widget","Widgets/Widget.html#method-i-update_safe","()","<p>Like update but with error handling\n"],["widget","DSL","DSL.html#method-i-widget","(type, options={})","<p>Configure a Widgets::Widget for your bar.\n"],["README","","README_md.html","","<p>RubyBar\n<p>A bar for wayland implemented with Ruby and GTK.\nConfiguration is done via a Ruby DSL.\n<p>RubyBar …\n"]]}}